{"version":3,"sources":["components/Form.js","components/Football.js","components/DisplayLogo.js","components/Error.js","components/Navigation.js","components/NextMatch.js","components/WhenHePlays.js","components/Routing.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","Fragment","onClick","click","Football","error","stack","name","id","src","concat","image","alt","override","css","_templateObject","DisplayLogo","state","loading","handleButtonClick","e","fetch","headers","X-Auth-Token","then","res","_this","setState","ok","Error","status","json","data","random","Math","floor","teams","crestUrl","catch","err","className","src_components_Form","this","react_spinners","sizeUnit","size","color","src_components_Football","Component","Navigation","NavLink","exact","to","activeClassName","NextMatch","date","Date","toLocaleString","value","homeTeam","awayTeam","WhenHePlays_templateObject","WhenHePlays","handleChange","target","handleNextMatch","playerNumber","API","_data$matches$","matches","utcDate","console","log","_this$state","onChange","src_components_NextMatch","Routing","document","title","BrowserRouter","basename","process","src_components_Navigation","Switch","Route","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_Routing","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ebcdd091.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Form.css'\r\n\r\n//function component for drawing the team from German Bundesliga\r\nconst Form = props => {\r\n    return (\r\n        <>                            \r\n            <button onClick={props.click}>Draw a team</button>                       \r\n        </>\r\n     );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './Football.css';\r\n\r\n//function component for displaying data\r\nconst Football = props => {\r\n    // checking if the error is caused with too many API calls\r\n    if (props.error.stack === 'TypeError: Failed to fetch') {\r\n        props.error.stack = 'This API lets only 10 calls per minute. Try again after a moment.';\r\n    } else if(props.error) {\r\n    // if the error is other than too many API calls, then don't show a message \r\n        props.error.stack = ''\r\n    }\r\n    return (     \r\n        <div>\r\n            {\r\n                (props.name && !props.error.stack) ? (\r\n                <>\r\n                    <div id=\"name\">{props.name}</div>\r\n                    <img src={`${props.image}`} alt=\"\"/>\r\n                </>\r\n            ) : <div>\r\n                    <h3>\r\n                        {props.error.stack ? props.error.stack : null}\r\n                    </h3>\r\n                </div> \r\n            }             \r\n        </div>    \r\n     );\r\n}\r\n\r\nexport default Football;","import React, { Component } from 'react';\r\nimport Form from './Form'\r\nimport Football from './Football'\r\nimport './DisplayLogo.css'\r\nimport { css } from '@emotion/core';\r\n// First way to import\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nconst override = css`\r\n    display: block;\r\n    margin: 0 auto;\r\n    border-color: red;\r\n`;\r\n\r\nclass DisplayLogo extends Component {\r\n  state = {\r\n    error: '',\r\n    name: '',\r\n    image: '',\r\n    loading: true\r\n  }\r\n  handleButtonClick = e => {\r\n    //download the data of german Bundesliga teams\r\n    const API = 'https://api.football-data.org/v2/competitions/2002/teams'\r\n\r\n    fetch(API, {\r\n      headers: {\r\n        //my personal key to this API\r\n        'X-Auth-Token': '8cf26ca4deb64429900d6be7f0576025'\r\n      }\r\n    })\r\n      .then(res => {\r\n        this.setState({ loading: true });\r\n        if (res.ok) {\r\n          return res;\r\n        }\r\n        throw Error(\"Nie udało się: Błąd nr \" + res.status)\r\n      })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        this.setState({ loading: false });\r\n        //Drawing a random number from range 0-17, because there are 18 teams in German Bundesliga and we start counting from 0\r\n        const random = Math.floor(Math.random() * 18)\r\n        this.setState({\r\n          error: '',\r\n          name: data.teams[random].name,\r\n          image: data.teams[random].crestUrl\r\n        })\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          error: err\r\n        })\r\n      })\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Form\r\n          click={this.handleButtonClick}\r\n        />\r\n        <div className='sweet-loading'>\r\n          <ClipLoader\r\n            css={override}\r\n            sizeUnit={\"px\"}\r\n            size={100}\r\n            color={'#123abc'}\r\n            loading={this.state.loading}\r\n          />\r\n        </div>\r\n        <Football\r\n          name={this.state.name}\r\n          image={this.state.image}\r\n          error={this.state.error} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisplayLogo;\r\n","import React from 'react';\r\n\r\nconst Error = () => {\r\n    return ( \r\n        <div>\r\n            <p>Error: Path does not exist</p>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Error;","import React from 'react';\r\nimport './Navigation.css'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\n\r\nconst Navigation = () => {\r\n    return ( \r\n        <div>\r\n            <button>\r\n                <NavLink exact to=\"/\" activeClassName=\"selected\" className=\"link\">Display Logo</NavLink>\r\n            </button>\r\n            <button>\r\n                <NavLink to=\"/when\" activeClassName=\"selected\" className=\"link\">When Does He Play?</NavLink>\r\n            </button>            \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Navigation;","import React from 'react';\r\nimport './NextMatch.css'\r\n\r\nconst NextMatch = props => {\r\n    // converting data to from utc to our system\r\n    const date = new Date(props.date).toLocaleString();\r\n    // checking if the error is caused with too many API calls\r\n    if (props.error.stack === 'TypeError: Failed to fetch') {\r\n        props.error.stack = 'This API lets only 10 calls per minute. Try again after a moment.';\r\n    } else if(props.error) {\r\n    // if the error is other than too many API calls, then don't show a message \r\n        props.error.stack = ''\r\n    }\r\n    return ( \r\n        <div>\r\n            {\r\n                (props.value && !props.error.stack) ? (\r\n                <div>\r\n                    <div>Next game:</div>\r\n                    <div>{props.homeTeam} vs. {props.awayTeam}</div>\r\n                    <div>Date: {date}</div>\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <h3>\r\n                        {props.error.stack ? (props.error.stack) : null}\r\n                    </h3>\r\n                </div> \r\n                )\r\n            }             \r\n        </div>        \r\n     );\r\n}\r\n \r\nexport default NextMatch;","import React, { Component } from 'react';\r\nimport './WhenHePlays.css'\r\nimport NextMatch from './NextMatch'\r\nimport { css } from '@emotion/core';\r\n// First way to import\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nconst override = css`\r\n    display: block;\r\n    margin: 0 auto;\r\n    border-color: red;\r\n`;\r\n\r\nclass WhenHePlays extends Component {\r\n    state = {\r\n        value: '',\r\n        homeTeam: '',\r\n        awayTeam: '',\r\n        date: '',\r\n        error: '',\r\n        loading: false\r\n    }\r\n    handleChange = e => {\r\n        this.setState({\r\n            value: e.target.value\r\n        });\r\n        this.handleNextMatch(e.target.value)\r\n    }\r\n    handleNextMatch = (playerNumber) => {\r\n        //downloading the array of future matches of the team\r\n        const API = `https://api.football-data.org/v2/teams/${playerNumber}/matches?status=SCHEDULED`\r\n\r\n        fetch(API, {\r\n            headers: {\r\n                //my personal key to this API\r\n                'X-Auth-Token': '8cf26ca4deb64429900d6be7f0576025'\r\n            }\r\n        })\r\n            .then(res => {\r\n                this.setState({\r\n                    loading: true\r\n                })\r\n                //if response.status is 200, then return response\r\n                if (res.ok) {\r\n                    return res;\r\n                }\r\n                throw Error(\"Nie udało się: Błąd nr \" + res.status)\r\n            })\r\n            // get json out of response\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                this.setState({\r\n                    loading: false\r\n                })\r\n                const { homeTeam, awayTeam, utcDate } = data.matches[0];\r\n                this.setState({\r\n                    homeTeam: homeTeam.name,\r\n                    awayTeam: awayTeam.name,\r\n                    date: utcDate\r\n                })\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                this.setState({\r\n                    error: err\r\n                })\r\n            })\r\n    }\r\n    render() {\r\n        const { value, homeTeam, awayTeam, date, error } = this.state\r\n        return (\r\n            <>\r\n                <div className='sweet-loading'>\r\n                    <ClipLoader\r\n                        css={override}\r\n                        sizeUnit={\"px\"}\r\n                        size={150}\r\n                        color={'#123abc'}\r\n                        loading={this.state.loading}\r\n                    />\r\n                </div>\r\n                <form>\r\n                    <select\r\n                        onChange={this.handleChange}\r\n                        value={this.state.value}\r\n                    >\r\n                        <option value=''>Choose the player</option>\r\n                        <option value='5'>Robert Lewandowski</option>\r\n                        <option value='340'>Jan Bednarek</option>\r\n                        <option value='98'>Krzysztof Piątek</option>\r\n                        <option value='113'>Arkadiusz Milik</option>\r\n                        <option value='584'>Karol Linetty</option>\r\n                        <option value='4'>Łukasz Piszczek</option>\r\n                        <option value='341'>Mateusz Klich</option>\r\n                        <option value='322'>Kamil Grosicki</option>\r\n                    </select>\r\n                    <NextMatch value={value} homeTeam={homeTeam} awayTeam={awayTeam} date={date} error={error} />\r\n                </form>\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default WhenHePlays;","import React, { Component } from 'react';\r\nimport './Routing.css'\r\nimport DisplayLogo from './DisplayLogo'\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport Error from './Error'\r\nimport Navigation from './Navigation'\r\nimport WhenHePlays from './WhenHePlays'\r\n\r\nclass Routing extends Component {\r\n  componentDidMount() {\r\n    document.title = \"football-app\"\r\n  }\r\n  render() {\r\n    return (\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <>\r\n          <Navigation />\r\n          <Switch>\r\n            <Route exact path=\"/\" component={DisplayLogo} />\r\n            <Route path=\"/when\" component={WhenHePlays} />\r\n            <Route component={Error} />\r\n          </Switch>\r\n        </>\r\n      </Router>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Routing;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Routing from './components/Routing';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Routing />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}