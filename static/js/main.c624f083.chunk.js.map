{"version":3,"sources":["components/Form.js","components/Football.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","Fragment","onClick","click","Football","id","name","src","concat","image","alt","error","String","App","state","handleButtonClick","e","preventDefault","fetch","headers","X-Auth-Token","then","res","ok","Error","status","json","data","random","Math","floor","_this","setState","teams","crestUrl","catch","err","className","src_components_Form","this","src_components_Football","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mQAYeA,eARF,SAAAC,GACT,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,UAAQE,QAASL,EAAMM,OAAvB,kBCOGC,SAVE,SAAAP,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKK,GAAG,QACJP,EAAAC,EAAAC,cAAA,OAAKK,GAAG,QAAQR,EAAMS,MACtBR,EAAAC,EAAAC,cAAA,OAAKO,IAAG,GAAAC,OAAKX,EAAMY,OAASC,IAAI,KAChCZ,EAAAC,EAAAC,cAAA,WAAMH,EAAMc,MAAQC,OAAOf,EAAMc,OAAQ,SCiDtCE,6MApDbC,MAAQ,CACNH,MAAO,GACPL,KAAM,GACNG,MAAO,MAETM,kBAAoB,SAAAC,GAClBA,EAAEC,iBAGFC,MAFY,2DAED,CACTC,QAAQ,CAENC,eAAgB,sCAGjBC,KAAK,SAAAC,GACJ,GAAGA,EAAIC,GACL,OAAOD,EAET,MAAME,MAAM,8CAA4BF,EAAIG,UAE7CJ,KAAK,SAAAC,GAAG,OAAIA,EAAII,SAChBL,KAAK,SAAAM,GAEJ,IAAMC,EAASC,KAAKC,MAAoB,GAAdD,KAAKD,UAC/BG,EAAKC,SAAS,CACZrB,MAAO,GACPL,KAAMqB,EAAKM,MAAML,GAAQtB,KACzBG,MAAOkB,EAAKM,MAAML,GAAQM,aAG7BC,MAAM,SAAAC,GACLL,EAAKC,SAAS,CACZrB,MAAOyB,+EAKb,OACEtC,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,OACbvC,EAAAC,EAAAC,cAACsC,EAAD,CACAnC,MAAOoC,KAAKxB,oBAEZjB,EAAAC,EAAAC,cAACwC,EAAD,CACAlC,KAAMiC,KAAKzB,MAAMR,KACjBG,MAAO8B,KAAKzB,MAAML,MAClBE,MAAO4B,KAAKzB,MAAMH,gBA/CR8B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.c624f083.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Form.css'\r\n\r\n//function component for drawing the team from German Bundesliga\r\nconst Form = props => {\r\n    return (\r\n        <>                            \r\n            <button onClick={props.click}>Draw a team</button>                       \r\n        </>\r\n     );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './Football.css';\r\n\r\n//function component for displaying data\r\nconst Football = props => {\r\n    return (        \r\n        <div id=\"club\"> \r\n            <div id=\"name\">{props.name}</div>\r\n            <img src={`${props.image}`} alt=\"\"/>\r\n            <div>{props.error ? String(props.error): null}</div>   \r\n        </div>\r\n     );\r\n}\r\n\r\nexport default Football;","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './Form'\nimport Football from './Football'\n\nclass App extends Component {\n  state = {\n    error: '', \n    name: '', \n    image: ''\n  }  \n  handleButtonClick = e => {\n    e.preventDefault();\n    const API = 'https://api.football-data.org/v2/competitions/2002/teams'\n\n    fetch(API, {\n      headers:{\n        //my personal key to this API\n        'X-Auth-Token': '8cf26ca4deb64429900d6be7f0576025'\n      }\n    })\n      .then(res => {\n        if(res.ok) {\n          return res;\n        }\n        throw Error(\"Nie udało się: Błąd nr \" + res.status)\n      })\n      .then(res => res.json())\n      .then(data => {\n        //Drawing a random number from range 0-17, because there are 18 teams in German Bundesliga and we start counting from 0\n        const random = Math.floor(Math.random()*18)\n        this.setState({\n          error: '',\n          name: data.teams[random].name,\n          image: data.teams[random].crestUrl\n        })\n      })\n      .catch(err => {\n        this.setState({\n          error: err\n        })\n      })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Form \n        click={this.handleButtonClick}     \n        />\n        <Football \n        name={this.state.name}\n        image={this.state.image}\n        error={this.state.error}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}